using System;
using System.Collections.Generic;
using System.Data.SQLite;
using System.Diagnostics;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Support.UI;

class ItemLinksParser
{
    static void Main(string[] args)
    {
        Stopwatch stopwatch = Stopwatch.StartNew();
        var driverPath = @"C:\my_jobs(only)\Auction_Stalcraft\StalcraftParser";
        var options = new ChromeOptions();
        var driver = new ChromeDriver(driverPath, options);

        try
        {
            driver.Navigate().GoToUrl("https://stalcraft-monitor.ru/auction");
            WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(20));

            IWebElement searchInput = wait.Until(d => d.FindElement(By.Id("searchItem")));
            searchInput.SendKeys("а");
            searchInput.SendKeys(Keys.Backspace);

            wait.Until(d => d.FindElement(By.ClassName("contentItem")));

            var items = driver.FindElements(By.ClassName("contentItem"));
            long loadTime = stopwatch.ElapsedMilliseconds;

            var itemList = new List<(string Name, string Id, string Url)>();
            foreach (var item in items)
            {
                string name = item.FindElement(By.ClassName("nameItemText")).Text;
                Console.WriteLine("Предмет обработан: " + name);
                string id = item.GetAttribute("onclick").Replace("selectItem('", "").Replace("')", "");
                string url = $"https://stalcraft-monitor.ru/auction?item={id}";
                itemList.Add((name, id, url));
            }

            long processTime = stopwatch.ElapsedMilliseconds;

            if (itemList.Count == 0)
            {
                Console.WriteLine("Нет данных для записи.");
                return;
            }

            string databasePath = "AuctionData.db";
            using (var connection = new SQLiteConnection($"Data Source={databasePath};Version=3;"))
            {
                connection.Open();

                string createTableQuery = @"
                    CREATE TABLE IF NOT EXISTS Items (
                        Url TEXT PRIMARY KEY,      -- Ссылка на страницу предмета (уникальная)
                        Name TEXT NOT NULL,        -- Название предмета
                        MinPrice REAL,             -- Минимальная цена
                        Liquidity REAL,            -- Ликвидность (время с 200-й сделки)
                        LastUpdated DATETIME       -- Дата и время обновления
                    );";

                using (var command = new SQLiteCommand(createTableQuery, connection))
                {
                    command.ExecuteNonQuery();
                }

                string insertQuery = @"
                    INSERT OR IGNORE INTO Items (Url, Name, MinPrice, Liquidity, LastUpdated)
                    VALUES (@Url, @Name, @MinPrice, @Liquidity, @LastUpdated);";

                foreach (var item in itemList)
                {
                    Console.WriteLine("Предмет вписан в таблицу: " + item.Name);
                    using (var command = new SQLiteCommand(insertQuery, connection))
                    {
                        command.Parameters.AddWithValue("@Url", item.Url);
                        command.Parameters.AddWithValue("@Name", item.Name);
                        command.Parameters.AddWithValue("@MinPrice", DBNull.Value);
                        command.Parameters.AddWithValue("@Liquidity", DBNull.Value);
                        command.Parameters.AddWithValue("@LastUpdated", DBNull.Value);
                        command.ExecuteNonQuery();
                    }
                }
            }

            long saveTime = stopwatch.ElapsedMilliseconds;

            Console.WriteLine("Данные успешно записаны в таблицу.");
            Console.WriteLine($"Время загрузки данных: {loadTime / 1000.0} сек");
            Console.WriteLine($"Время обработки данных: {(processTime - loadTime) / 1000.0} сек");
            Console.WriteLine($"Время записи данных: {(saveTime - processTime) / 1000.0} сек");
            Console.WriteLine($"Общее время выполнения: {saveTime / 1000.0} сек");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Произошла ошибка: " + ex.Message);
        }
        finally
        {
            driver.Quit();
            stopwatch.Stop();
        }
    }
}
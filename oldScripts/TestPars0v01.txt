using System;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Support.UI;

class Program
{
    static void Main(string[] args)
    {
        // Указываем путь к chromedriver.exe
        var driverPath = @"C:\my_jobs(only)\Auction_Stalcraft\StalcraftParser";
        var options = new ChromeOptions();
        // options.AddArgument("--headless"); // Без графического интерфейса
        // options.AddArgument("--proxy-server=http://your-proxy-address:port");

        var driver = new ChromeDriver(driverPath, options);

        try
        {
            // Переход на страницу аммиака
            driver.Navigate().GoToUrl("https://stalcraft-monitor.ru/auction?item=40vn");

            // Ожидание загрузки страницы
            WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(10));

            // Ожидание загрузки минимальной цены
            IWebElement minPriceElement = wait.Until(d =>
            {
                try
                {
                    var element = d.FindElement(By.Id("tempMinPrice"));
                    Console.WriteLine("Элемент найден: " + element.Text);
                    return element.Text != "" ? element : null;
                }
                catch (Exception ex)
                {
                    return null;
                }
            });

            if (minPriceElement == null)
            {
                throw new Exception("Элемент с ценой не найден или пуст.");
            }

            // Извлечение минимальной цены
            string minPrice = minPriceElement.Text;
            Console.WriteLine("Извлечённый текст: " + minPrice);
            decimal price = ExtractPrice(minPrice);

            // Вывод результата
            Console.WriteLine("Минимальная цена: " + price);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Произошла ошибка: " + ex.Message);
        }
        finally
        {
            // Закрытие браузера
            driver.Quit();
        }
    }

    static decimal ExtractPrice(string priceText)
    {
        // Удаляем лишние символы
        priceText = priceText.Replace("&nbsp;", "").Replace("₽", "").Trim();

        // Заменяем запятую на точку
        priceText = priceText.Replace(",", ".");

        // Преобразуем в число
        if (decimal.TryParse(priceText, out decimal price))
        {
            return price;
        }
        else
        {
            throw new FormatException("Не удалось преобразовать цену в число.");
        }
    }
}